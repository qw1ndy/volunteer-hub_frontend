{"ast":null,"code":"var _jsxFileName = \"/Users/rostyslavbalytskiy/Projects/VolonteerHub/volunteer-hub/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Перевірка токена при завантаженні\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      // Тут буде запит до API для отримання даних користувача\n      // Поки що використовуємо мокові дані\n      setUser({\n        id: \"1\",\n        name: \"Іван Петренко\",\n        email: \"user@example.com\",\n        location: \"Київ, Україна\",\n        bio: \"Активний волонтер з 5-річним досвідом\",\n        avatar: \"/photo_2024-04-18_02-14-36.jpg\"\n      });\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Тут буде реальний запит до API\n      // Поки що імітуємо успішний вхід\n      const token = \"mock-token\";\n      localStorage.setItem(\"token\", token);\n      setUser({\n        id: \"1\",\n        name: \"Іван Петренко\",\n        email: email,\n        location: \"Київ, Україна\",\n        bio: \"Активний волонтер з 5-річним досвідом\",\n        avatar: \"/photo_2024-04-18_02-14-36.jpg\"\n      });\n      setIsAuthenticated(true);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Помилка при вході:\", error);\n      throw error;\n    }\n  };\n  const register = async (name, email, password) => {\n    try {\n      // Тут буде реальний запит до API\n      // Поки що імітуємо успішну реєстрацію\n      const token = \"mock-token\";\n      localStorage.setItem(\"token\", token);\n      setUser({\n        id: \"1\",\n        name: name,\n        email: email,\n        location: \"Київ, Україна\",\n        bio: \"Новий волонтер\",\n        avatar: \"/default-avatar.jpg\"\n      });\n      setIsAuthenticated(true);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Помилка при реєстрації:\", error);\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"2gT3Teno6rKwKhH8PozLchmTS4I=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","navigate","token","localStorage","getItem","id","name","email","location","bio","avatar","login","password","setItem","error","console","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/rostyslavbalytskiy/Projects/VolonteerHub/volunteer-hub/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  location?: string;\n  bio?: string;\n  avatar?: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (name: string, email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Перевірка токена при завантаженні\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      // Тут буде запит до API для отримання даних користувача\n      // Поки що використовуємо мокові дані\n      setUser({\n        id: \"1\",\n        name: \"Іван Петренко\",\n        email: \"user@example.com\",\n        location: \"Київ, Україна\",\n        bio: \"Активний волонтер з 5-річним досвідом\",\n        avatar: \"/photo_2024-04-18_02-14-36.jpg\",\n      });\n      setIsAuthenticated(true);\n    }\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      // Тут буде реальний запит до API\n      // Поки що імітуємо успішний вхід\n      const token = \"mock-token\";\n      localStorage.setItem(\"token\", token);\n\n      setUser({\n        id: \"1\",\n        name: \"Іван Петренко\",\n        email: email,\n        location: \"Київ, Україна\",\n        bio: \"Активний волонтер з 5-річним досвідом\",\n        avatar: \"/photo_2024-04-18_02-14-36.jpg\",\n      });\n      setIsAuthenticated(true);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Помилка при вході:\", error);\n      throw error;\n    }\n  };\n\n  const register = async (name: string, email: string, password: string) => {\n    try {\n      // Тут буде реальний запит до API\n      // Поки що імітуємо успішну реєстрацію\n      const token = \"mock-token\";\n      localStorage.setItem(\"token\", token);\n\n      setUser({\n        id: \"1\",\n        name: name,\n        email: email,\n        location: \"Київ, Україна\",\n        bio: \"Новий волонтер\",\n        avatar: \"/default-avatar.jpg\",\n      });\n      setIsAuthenticated(true);\n      navigate(\"/profile\");\n    } catch (error) {\n      console.error(\"Помилка при реєстрації:\", error);\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    setUser(null);\n    setIsAuthenticated(false);\n    navigate(\"/\");\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{ user, isAuthenticated, login, register, logout }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}