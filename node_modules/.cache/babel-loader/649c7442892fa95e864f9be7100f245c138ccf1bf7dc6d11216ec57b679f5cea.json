{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:3000/api\";\nexport const organizationService = {\n  async getOrganizations(filters) {\n    try {\n      const queryParams = new URLSearchParams();\n      if (filters.search) queryParams.append(\"search\", filters.search);\n      if (filters.location) queryParams.append(\"location\", filters.location);\n      if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy);\n      const response = await fetch(`${API_BASE_URL}/organizations?${queryParams.toString()}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.status !== 200) {\n        throw new Error(result.message || \"Помилка при отриманні даних\");\n      }\n      return result.data;\n    } catch (error) {\n      console.error(\"Помилка при отриманні організацій:\", error);\n      throw error;\n    }\n  },\n  async getOrganizationById(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/organizations/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.status !== 200) {\n        throw new Error(result.message || \"Помилка при отриманні даних\");\n      }\n      return result.data;\n    } catch (error) {\n      console.error(\"Помилка при отриманні організації:\", error);\n      throw error;\n    }\n  },\n  async joinOrganization(organizationId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/organizations/${organizationId}/join`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n      if (result.status !== 200) {\n        throw new Error(result.message || \"Помилка при приєднанні до організації\");\n      }\n    } catch (error) {\n      console.error(\"Помилка при приєднанні до організації:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","organizationService","getOrganizations","filters","queryParams","URLSearchParams","search","append","location","sortBy","response","fetch","toString","ok","Error","status","result","json","message","data","error","console","getOrganizationById","id","joinOrganization","organizationId","method","headers","Authorization","localStorage","getItem"],"sources":["/Users/rostyslavbalytskiy/Projects/VolonteerHub/volunteer-hub/src/services/organizationService.ts"],"sourcesContent":["import { Organization } from \"../types/organization\";\n\ninterface OrganizationFilters {\n  search: string;\n  location: string;\n  sortBy: \"name\" | \"rating\" | \"membersCount\";\n}\n\ninterface ApiResponse<T> {\n  data: T;\n  status: number;\n  message?: string;\n}\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:3000/api\";\n\nexport const organizationService = {\n  async getOrganizations(\n    filters: OrganizationFilters\n  ): Promise<Organization[]> {\n    try {\n      const queryParams = new URLSearchParams();\n      if (filters.search) queryParams.append(\"search\", filters.search);\n      if (filters.location) queryParams.append(\"location\", filters.location);\n      if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy);\n\n      const response = await fetch(\n        `${API_BASE_URL}/organizations?${queryParams.toString()}`\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result: ApiResponse<Organization[]> = await response.json();\n\n      if (result.status !== 200) {\n        throw new Error(result.message || \"Помилка при отриманні даних\");\n      }\n\n      return result.data;\n    } catch (error) {\n      console.error(\"Помилка при отриманні організацій:\", error);\n      throw error;\n    }\n  },\n\n  async getOrganizationById(id: string): Promise<Organization> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/organizations/${id}`);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result: ApiResponse<Organization> = await response.json();\n\n      if (result.status !== 200) {\n        throw new Error(result.message || \"Помилка при отриманні даних\");\n      }\n\n      return result.data;\n    } catch (error) {\n      console.error(\"Помилка при отриманні організації:\", error);\n      throw error;\n    }\n  },\n\n  async joinOrganization(organizationId: string): Promise<void> {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/organizations/${organizationId}/join`,\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const result: ApiResponse<void> = await response.json();\n\n      if (result.status !== 200) {\n        throw new Error(\n          result.message || \"Помилка при приєднанні до організації\"\n        );\n      }\n    } catch (error) {\n      console.error(\"Помилка при приєднанні до організації:\", error);\n      throw error;\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}