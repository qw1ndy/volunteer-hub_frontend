{"ast":null,"code":"export const organizationService = {\n  async getOrganizations(filters) {\n    // TODO: Замінити на реальний API-запит\n    const mockOrganizations = [{\n      id: \"1\",\n      name: \"Волонтери Києва\",\n      description: \"Громадська організація, яка об'єднує волонтерів столиці\",\n      logo: \"https://via.placeholder.com/50\",\n      location: \"Київ\",\n      membersCount: 150,\n      rating: 4.8\n    }, {\n      id: \"2\",\n      name: \"Допомога Харкову\",\n      description: \"Волонтерська організація для підтримки жителів Харкова\",\n      logo: \"https://via.placeholder.com/50\",\n      location: \"Харків\",\n      membersCount: 200,\n      rating: 4.9\n    }];\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let filtered = [...mockOrganizations];\n        if (filters.search) {\n          filtered = filtered.filter(org => org.name.toLowerCase().includes(filters.search.toLowerCase()) || org.description.toLowerCase().includes(filters.search.toLowerCase()));\n        }\n        if (filters.location) {\n          filtered = filtered.filter(org => org.location.toLowerCase().includes(filters.location.toLowerCase()));\n        }\n        filtered.sort((a, b) => {\n          switch (filters.sortBy) {\n            case \"name\":\n              return a.name.localeCompare(b.name);\n            case \"rating\":\n              return b.rating - a.rating;\n            case \"membersCount\":\n              return b.membersCount - a.membersCount;\n            default:\n              return 0;\n          }\n        });\n        resolve(filtered);\n      }, 500); // Імітація затримки мережі\n    });\n  }\n};","map":{"version":3,"names":["organizationService","getOrganizations","filters","mockOrganizations","id","name","description","logo","location","membersCount","rating","Promise","resolve","setTimeout","filtered","search","filter","org","toLowerCase","includes","sort","a","b","sortBy","localeCompare"],"sources":["/Users/rostyslavbalytskiy/Projects/VolonteerHub/volunteer-hub/src/services/organizationService.ts"],"sourcesContent":["import { Organization } from \"../types/organization\";\n\ninterface OrganizationFilters {\n  search: string;\n  location: string;\n  sortBy: \"name\" | \"rating\" | \"membersCount\";\n}\n\nexport const organizationService = {\n  async getOrganizations(\n    filters: OrganizationFilters\n  ): Promise<Organization[]> {\n    // TODO: Замінити на реальний API-запит\n    const mockOrganizations: Organization[] = [\n      {\n        id: \"1\",\n        name: \"Волонтери Києва\",\n        description: \"Громадська організація, яка об'єднує волонтерів столиці\",\n        logo: \"https://via.placeholder.com/50\",\n        location: \"Київ\",\n        membersCount: 150,\n        rating: 4.8,\n      },\n      {\n        id: \"2\",\n        name: \"Допомога Харкову\",\n        description: \"Волонтерська організація для підтримки жителів Харкова\",\n        logo: \"https://via.placeholder.com/50\",\n        location: \"Харків\",\n        membersCount: 200,\n        rating: 4.9,\n      },\n    ];\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        let filtered = [...mockOrganizations];\n\n        if (filters.search) {\n          filtered = filtered.filter(\n            (org) =>\n              org.name.toLowerCase().includes(filters.search.toLowerCase()) ||\n              org.description\n                .toLowerCase()\n                .includes(filters.search.toLowerCase())\n          );\n        }\n\n        if (filters.location) {\n          filtered = filtered.filter((org) =>\n            org.location.toLowerCase().includes(filters.location.toLowerCase())\n          );\n        }\n\n        filtered.sort((a, b) => {\n          switch (filters.sortBy) {\n            case \"name\":\n              return a.name.localeCompare(b.name);\n            case \"rating\":\n              return b.rating - a.rating;\n            case \"membersCount\":\n              return b.membersCount - a.membersCount;\n            default:\n              return 0;\n          }\n        });\n\n        resolve(filtered);\n      }, 500); // Імітація затримки мережі\n    });\n  },\n};\n"],"mappings":"AAQA,OAAO,MAAMA,mBAAmB,GAAG;EACjC,MAAMC,gBAAgBA,CACpBC,OAA4B,EACH;IACzB;IACA,MAAMC,iBAAiC,GAAG,CACxC;MACEC,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,iBAAiB;MACvBC,WAAW,EAAE,yDAAyD;MACtEC,IAAI,EAAE,gCAAgC;MACtCC,QAAQ,EAAE,MAAM;MAChBC,YAAY,EAAE,GAAG;MACjBC,MAAM,EAAE;IACV,CAAC,EACD;MACEN,EAAE,EAAE,GAAG;MACPC,IAAI,EAAE,kBAAkB;MACxBC,WAAW,EAAE,wDAAwD;MACrEC,IAAI,EAAE,gCAAgC;MACtCC,QAAQ,EAAE,QAAQ;MAClBC,YAAY,EAAE,GAAG;MACjBC,MAAM,EAAE;IACV,CAAC,CACF;IAED,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;MAC9BC,UAAU,CAAC,MAAM;QACf,IAAIC,QAAQ,GAAG,CAAC,GAAGX,iBAAiB,CAAC;QAErC,IAAID,OAAO,CAACa,MAAM,EAAE;UAClBD,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CACvBC,GAAG,IACFA,GAAG,CAACZ,IAAI,CAACa,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACjB,OAAO,CAACa,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC,IAC7DD,GAAG,CAACX,WAAW,CACZY,WAAW,CAAC,CAAC,CACbC,QAAQ,CAACjB,OAAO,CAACa,MAAM,CAACG,WAAW,CAAC,CAAC,CAC5C,CAAC;QACH;QAEA,IAAIhB,OAAO,CAACM,QAAQ,EAAE;UACpBM,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAAEC,GAAG,IAC7BA,GAAG,CAACT,QAAQ,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACjB,OAAO,CAACM,QAAQ,CAACU,WAAW,CAAC,CAAC,CACpE,CAAC;QACH;QAEAJ,QAAQ,CAACM,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACtB,QAAQpB,OAAO,CAACqB,MAAM;YACpB,KAAK,MAAM;cACT,OAAOF,CAAC,CAAChB,IAAI,CAACmB,aAAa,CAACF,CAAC,CAACjB,IAAI,CAAC;YACrC,KAAK,QAAQ;cACX,OAAOiB,CAAC,CAACZ,MAAM,GAAGW,CAAC,CAACX,MAAM;YAC5B,KAAK,cAAc;cACjB,OAAOY,CAAC,CAACb,YAAY,GAAGY,CAAC,CAACZ,YAAY;YACxC;cACE,OAAO,CAAC;UACZ;QACF,CAAC,CAAC;QAEFG,OAAO,CAACE,QAAQ,CAAC;MACnB,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}