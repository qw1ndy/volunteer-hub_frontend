{"ast":null,"code":"import axios from \"axios\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Додавання токена до запитів\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обробка помилок\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/\";\n  }\n  return Promise.reject(error);\n});\n\n// Авторизація\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post(\"/auth/login\", credentials);\n    localStorage.setItem(\"token\", response.data.token);\n    return response.data;\n  },\n  register: async data => {\n    const response = await api.post(\"/auth/register\", data);\n    localStorage.setItem(\"token\", response.data.token);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem(\"token\");\n  },\n  getCurrentUser: async () => {\n    const response = await api.get(\"/auth/me\");\n    return response.data;\n  }\n};\n\n// Події\nexport const eventService = {\n  getEvents: async params => {\n    const response = await api.get(\"/events\", {\n      params\n    });\n    return response.data;\n  },\n  getEvent: async id => {\n    const response = await api.get(`/events/${id}`);\n    return response.data;\n  },\n  createEvent: async event => {\n    const response = await api.post(\"/events\", event);\n    return response.data;\n  },\n  updateEvent: async (id, event) => {\n    const response = await api.put(`/events/${id}`, event);\n    return response.data;\n  },\n  deleteEvent: async id => {\n    await api.delete(`/events/${id}`);\n  },\n  joinEvent: async id => {\n    await api.post(`/events/${id}/join`);\n  },\n  leaveEvent: async id => {\n    await api.post(`/events/${id}/leave`);\n  }\n};\n\n// Організації\nexport const organizationService = {\n  getOrganizations: async params => {\n    const response = await api.get(\"/organizations\", {\n      params\n    });\n    return response.data;\n  },\n  getOrganization: async id => {\n    const response = await api.get(`/organizations/${id}`);\n    return response.data;\n  },\n  createOrganization: async organization => {\n    const response = await api.post(\"/organizations\", organization);\n    return response.data;\n  },\n  updateOrganization: async (id, organization) => {\n    const response = await api.put(`/organizations/${id}`, organization);\n    return response.data;\n  }\n};\n\n// Коментарі\nexport const commentService = {\n  getEventComments: async eventId => {\n    const response = await api.get(`/events/${eventId}/comments`);\n    return response.data;\n  },\n  createComment: async (eventId, text) => {\n    const response = await api.post(`/events/${eventId}/comments`, {\n      text\n    });\n    return response.data;\n  },\n  deleteComment: async (eventId, commentId) => {\n    await api.delete(`/events/${eventId}/comments/${commentId}`);\n  }\n};\n\n// Користувачі\nexport const userService = {\n  getUser: async id => {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  },\n  updateUser: async (id, user) => {\n    const response = await api.put(`/users/${id}`, user);\n    return response.data;\n  },\n  updateUserSkills: async (id, skills) => {\n    const response = await api.put(`/users/${id}/skills`, {\n      skills\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","post","setItem","data","register","logout","getCurrentUser","get","eventService","getEvents","params","getEvent","id","createEvent","event","updateEvent","put","deleteEvent","delete","joinEvent","leaveEvent","organizationService","getOrganizations","getOrganization","createOrganization","organization","updateOrganization","commentService","getEventComments","eventId","createComment","text","deleteComment","commentId","userService","getUser","updateUser","user","updateUserSkills","skills"],"sources":["/Users/rostyslavbalytskiy/Projects/VolonteerHub/volunteer-hub/src/services/api.ts"],"sourcesContent":["import axios from \"axios\";\nimport {\n  User,\n  Event,\n  Organization,\n  Comment,\n  AuthCredentials,\n  RegisterData,\n  AuthResponse,\n  PaginationParams,\n  PaginatedResponse,\n  EventFilters,\n  OrganizationFilters,\n} from \"../types/api\";\n\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Додавання токена до запитів\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Обробка помилок\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/\";\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Авторизація\nexport const authService = {\n  login: async (credentials: AuthCredentials): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/login\", credentials);\n    localStorage.setItem(\"token\", response.data.token);\n    return response.data;\n  },\n\n  register: async (data: RegisterData): Promise<AuthResponse> => {\n    const response = await api.post<AuthResponse>(\"/auth/register\", data);\n    localStorage.setItem(\"token\", response.data.token);\n    return response.data;\n  },\n\n  logout: () => {\n    localStorage.removeItem(\"token\");\n  },\n\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get<User>(\"/auth/me\");\n    return response.data;\n  },\n};\n\n// Події\nexport const eventService = {\n  getEvents: async (\n    params: PaginationParams & EventFilters\n  ): Promise<PaginatedResponse<Event>> => {\n    const response = await api.get<PaginatedResponse<Event>>(\"/events\", {\n      params,\n    });\n    return response.data;\n  },\n\n  getEvent: async (id: string): Promise<Event> => {\n    const response = await api.get<Event>(`/events/${id}`);\n    return response.data;\n  },\n\n  createEvent: async (event: Omit<Event, \"id\">): Promise<Event> => {\n    const response = await api.post<Event>(\"/events\", event);\n    return response.data;\n  },\n\n  updateEvent: async (id: string, event: Partial<Event>): Promise<Event> => {\n    const response = await api.put<Event>(`/events/${id}`, event);\n    return response.data;\n  },\n\n  deleteEvent: async (id: string): Promise<void> => {\n    await api.delete(`/events/${id}`);\n  },\n\n  joinEvent: async (id: string): Promise<void> => {\n    await api.post(`/events/${id}/join`);\n  },\n\n  leaveEvent: async (id: string): Promise<void> => {\n    await api.post(`/events/${id}/leave`);\n  },\n};\n\n// Організації\nexport const organizationService = {\n  getOrganizations: async (\n    params: PaginationParams & OrganizationFilters\n  ): Promise<PaginatedResponse<Organization>> => {\n    const response = await api.get<PaginatedResponse<Organization>>(\n      \"/organizations\",\n      { params }\n    );\n    return response.data;\n  },\n\n  getOrganization: async (id: string): Promise<Organization> => {\n    const response = await api.get<Organization>(`/organizations/${id}`);\n    return response.data;\n  },\n\n  createOrganization: async (\n    organization: Omit<Organization, \"id\">\n  ): Promise<Organization> => {\n    const response = await api.post<Organization>(\n      \"/organizations\",\n      organization\n    );\n    return response.data;\n  },\n\n  updateOrganization: async (\n    id: string,\n    organization: Partial<Organization>\n  ): Promise<Organization> => {\n    const response = await api.put<Organization>(\n      `/organizations/${id}`,\n      organization\n    );\n    return response.data;\n  },\n};\n\n// Коментарі\nexport const commentService = {\n  getEventComments: async (eventId: string): Promise<Comment[]> => {\n    const response = await api.get<Comment[]>(`/events/${eventId}/comments`);\n    return response.data;\n  },\n\n  createComment: async (eventId: string, text: string): Promise<Comment> => {\n    const response = await api.post<Comment>(`/events/${eventId}/comments`, {\n      text,\n    });\n    return response.data;\n  },\n\n  deleteComment: async (eventId: string, commentId: string): Promise<void> => {\n    await api.delete(`/events/${eventId}/comments/${commentId}`);\n  },\n};\n\n// Користувачі\nexport const userService = {\n  getUser: async (id: string): Promise<User> => {\n    const response = await api.get<User>(`/users/${id}`);\n    return response.data;\n  },\n\n  updateUser: async (id: string, user: Partial<User>): Promise<User> => {\n    const response = await api.put<User>(`/users/${id}`, user);\n    return response.data;\n  },\n\n  updateUserSkills: async (id: string, skills: string[]): Promise<User> => {\n    const response = await api.put<User>(`/users/${id}/skills`, { skills });\n    return response.data;\n  },\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}